---
title: Advanced Certificate Rotation with CredHub Maestro
owner: CredHub Maestro
---

## <a id='overview'></a> CredHub Maestro Overview

CredHub Maestro is a CLI that facilitates rotations of CredHub managed certificates. Using Maestro, you can do the following:

* Gain visibility into the certificates in your foundation to determine if any CredHub certificates are expiring soon
* Rotate CredHub certificates
* Cleanup inactive certificate versions so that CredHub doesn’t run out of disk space

## <a id='contents'></a> Contents

* <a href="#setup-usage">Setup and Usage</a>
* <a href="#commands">Commands</a>
* <a href="#rotation-workflow">Rotating CredHub Managed Certificates</a>
    * <a href="#discovery">Discovering Expiring Certificates</a>
    * <a href="#bulk-rotation">Rotating all CAs and Leaf Certificates</a>
    * <a href="#services-rotation">Services TLS CA Rotation Workflow</a>
    * <a href="#single-rotation">Rotating a Single CA and its Leaf Certificates</a>
    * <a href="#leaf-rotation">Rotating all Leaf Certificates</a>
* <a href="#garbage-collect-workflow">Cleaning Up Inactive Certificate Versions</a>

## <a id='setup-usage'></a> Setup and Usage

Maestro is available on PCF 2.8+ OpsManager Environments. 
<p class="note">
<strong>Note:</strong> Contact your account team in order to use Maestro outside of OpsManager environments 
</p>

### Required Environment Variables
<p class="note">
<strong>Note:</strong> To set the BOSH environment variables follow <a href="https://docs.pivotal.io/platform/2-8/customizing/trouble-advanced.html" target="_blank">these instructions</a>. The CredHub environment variables can be set by following the table below. 
</p>

<table border="1">
  <tr>
    <th>Environment Variable</th>
    <th>Description</th>
  </tr>
  <tr>
    <td>BOSH_ENVIRONMENT</td>
    <td>URL/IP Address of BOSH director</td>
  </tr>
  <tr>
    <td>BOSH_CLIENT</td>
    <td>Name of BOSH client</td>
  </tr>
  <tr>
    <td>BOSH_CLIENT_SECRET</td>
    <td>BOSH client secret</td>
  </tr>
  <tr>
    <td>BOSH_CA_CERT</td>
    <td>Path or value of BOSH director trusted CA cert</td>
  </tr>
  <tr>
  <td>CREDHUB_SERVER</td>
  <td>URL of BOSH director CredHub server. This should be <code>BOSH_ENVIRONMENT:8844</code></td>
  </tr>
  <tr>
    <td>CREDHUB_CLIENT</td>
    <td>Name of CredHub Client. This will be the same as <code>BOSH_CLIENT</code></td>
  </tr>
  <tr>
    <td>CREDHUB_SECRET</td>
    <td>CredHub client secret. This will be the same as <code>BOSH_CLIENT_SECRET</code></td>
  </tr>
  <tr>
    <td>CREDHUB_CA_CERT</td>
    <td>Path or value of CredHub trusted CA cert. This will be the same as <code>BOSH_CA_CERT</code></td>
  </tr>
</table>

### Using Maestro from outside of your foundation (via a jumpbox)
In addition to the required environment variables, the following variables must be set:
<table border="1">
  <tr>
    <th>Environment Variable</th>
    <th>Description</th>
  </tr>
  <tr>
    <td>BOSH\_ALL\_PROXY</td>
    <td>Socks5 proxy address of BOSH director jumpbox</td>
  </tr>
  <tr>
    <td>CREDHUB_PROXY</td>
    <td>Socks5 proxy address of CredHub jumpbox</td>
  </tr>
</table>

### Optional Environment Variables
<table border="1">
  <tr>
    <th>Environment Variable</th>
    <th>Description</th>
  </tr>
  <tr>
    <td>MAESTRO_DEBUG</td>
    <td>Enable Maestro/CredHub/BOSH debug logging</td>
  </tr>
  <tr>
    <td>MAESTRO_OUTPUT_JSON</td>
    <td>Print all maestro command output as JSON</td>
  </tr>
</table>

## <a id='commands'></a> Commands
Run `maestro --help` for more information

### List Command
The list command (`maestro list`) is used to display expiry information for all actively deployed certificates in CredHub

Flags:

```
expires-within      Filter certificates by expiry window. Valid units are d (day), w (week), m (month), y (year)
deployment-name     Filter certificates by deployment name
name                Show metadata for single certificate
include-all 		Include inactive certificates in response (default: false)
ca-only 		    Filter certificates that are certificate authorities (default: false)
leaf-only 		    Filter certificates that are end-entity certificates (default: false)
generated-only 	    Include only certificates that have been generated by CredHub (default: false)
```

The `deployment-name` and `include-all` flags are mutually exclusive

### Topology Command
The topology command (`maestro topology`) is used to display expiry information for all actively deployed certificates in CredHub

Flags:

```
name            Display topology for single certificate
include-all     Display topology for both active and inactive certificates
```

#### Expected Sub-Command
The Expected subcommand (`maestro topology expected`) is used to show the expected topology that would result from a BOSH deployment

Flags:

```
deployment-names     Allow expected topology to reflect a selective deployment (must be a comma-separated list)
```

### Regenerate Command
The regenerate command (`maestro regenerate`) is used to regenerate CredHub managed certificates. By default, certificates that have been set in CredHub will not be regenerated.

#### Ca Sub-Command
The regenerate ca sub-command (`maestro regenerate ca`) is used to regenerate actively deployed certificate authorities

Flags:

```
all 		Regenerate all actively deployed CAs (certificate authorities)
name 		Regenerate single CA by name
dry-run 	List CAs to be regenerated
exclude 	Comma-separated list of CAs that will be excluded from being regenerated. All children of excluded CAs (i.e intermediates) will also be excluded
force 		Regenerate both CredHub generated and set CAs
```

#### Leaf Sub-Command
The regenerate leaf sub-command (`maestro regenerate leaf`) is used to regenerate actively deployed end-entity (leaf) certificates

Flags:

```
all 			    Regenerate all actively deployed leaf certificates
name 			    Regenerate single leaf by name
signed-by 		    Regenerate all actively deployed leaf certificates signed by a specific CA
dry-run 		    List leafs to be regenerated
exclude-signed-by 	Exclude all leafs signed by a list of CAs from being regenerated
force 			    Regenerate both CredHub generated and set leaf certificates
```

### Update Transitional Command
The update-transitional command (`maestro update-transitional`) is used to update the transitional flag for certificate authorities

#### Latest Sub-Command
The latest sub-command (`maestro update-transitional latest`) is used to update the transitional flag for the latest version of the actively deployed certificate authority

Flags:

```
all 		Bulk update the transitional flag for all actively deployed CAs
name 		Update transitional flag for a single CA
dry-run 	List CAs to be updated
exclude 	Exclude a list of CAs (and their children) from being updated
```

#### Signing Sub-Command
The signing sub-command (`maestro update-transitional signing`) is used to update the transitional flag for the version of the actively deployed CA that signed deployed leaf certificates

Flags:

```
all 		Bulk update the transitional flag for all actively deployed CAs
name 		Update transitional flag for a single CA
dry-run 	List CAs to be updated
exclude 	Exclude a list of CAs (and their children) from being updated
```

#### Remove Sub-Command
The Remove sub-command (`maestro update-transitional remove`) is used to remove the transitional flag for all versions of the actively deployed CA

Flags:

```
all 		Bulk remove the transitional flag for all actively deployed CAs
name 		Remove transitional flag for a single CA
dry-run 	List CAs to be updated
exclude 	Exclude a list of CAs (and their children) from being updated
```

### Garbage Collect Command
The garbage collect command (`maestro garbage-collect`) is used to cleanup inactive certificate versions

#### Leaf Sub-Command
The Leaf subcommand (`maestro garbage-collect leaf`) is used to cleanup inactive leaf certificate versions that are older than the active certificate version

Flags:

```
all 		Remove all inactive versions of deployed leaf certificates
name 		Remove all inactive versions of a single leaf certificate
dry-run 	List leaf certificate versions to be removed
force 		Remove all inactive leaf certificates
```

#### Ca Sub-Command
The Ca subcommand (`maestro garbage-collect ca`) is used to cleanup inactive certificate authority versions that are older than the active certificate authority version

Flags:

```
all 		Remove all inactive versions of deployed certificate authorities
name 		Remove all inactive versions of a single certificate authority
dry-run 	List certificate authority versions to be removed
force 		Remove all inactive certificate authorities
```

## <a id='rotation-workflow'></a> Rotating CredHub Managed Certificates

### Prerequisites

* All Maestro rotation workflows ignore CredHub Set certificates by default. If you have recently upgraded to PCF 2.8 (CredHub v2.5.X) and have manually CredHub Set certificates, follow this [guide](manual-credhub-certificate.html) on how to mark them as `generated: false`
* To ensure that there is no app availability downtime during a rotation, it is recommended that all instance groups are scaled up and an external blobstore is used.

<p class="note">
<strong>Note:</strong> This document only covers rotating CredHub managed certificates. If you would like to rotate both OpsManager and CredHub managed certificates, follow the existing <a href="api-cert-rotation.html">PCF certificate rotation workflow</a> for your PCF version
</p>

### <a id='discovery'></a> Discovering Expiring Certificates

Before kicking off a rotation, you should use the `maestro list` command to determine if there are any certificates expiring soon, and which rotation procedure to follow

To retrieve a list of certificates expiring within a given timeframe run the following:
`maestro list --expires-within <TIME-PERIOD>`    

With this list of certificates expiring soon, determine the best rotation procedure to follow:

* If multiple Certificate Authorities (CAs) are expiring soon, follow the <a href="#bulk-rotation">Bulk CA Rotation Workflow</a>
* If the only certificates expiring are end-entity (leaf) certificates, follow the <a href="#leaf-rotation">Leaf-only Certificate Rotation Workflow</a>
* If you only desire to rotate a subset of CAs, follow the <a href="#single-rotation">Single CA Rotation Workflow</a>
* If you need to rotate the Services TLS CA, follow the <a href="#services-rotation">Services TLS CA Rotation Workflow</a>

<p class="note">
<strong>Note:</strong> All of the maestro rotation commands have a dry-run flag that can be used to preview the certificates that will be modified
</p>

### <a id='bulk-rotation'></a> Rotating all CAs and Leaf Certificates
<p class="note">
<strong>Note:</strong> If any of your deployments use a services CA, all maestro commands except regenerating the leaf should be run with <code>--exclude /services/tls_ca</code> and regenerating the leafs should be run with <code>--exclude-signed-by /services/tls_ca</code>. The process for rotating the services CA requires additional steps to ensure that there is no downtime, which is why it should get excluded from rotations. Follow <a href="#services-rotation">this procedure</a> to rotate a Services CA. 
</p>

1. Regenerate all CAs. This will create a new version of every CA.                                 
`maestro regenerate ca --all`
1. Mark the latest version of each CA as transitional (inactive). This is so that all leafs trust the new CA version                                                                                                       
`maestro update-transitional latest --all`
1. Redeploy all deployments
1. Mark the signing version of each CA as transitional.                                               
`maestro update-transitional signing --all`
1. Regenerate all leaf certificates.                                                                                          
`maestro regenerate leaf --all`
1. Redeploy all deployments
1. Remove the transitional flag on all certificate versions. This will remove the old, now in-active CA versions on the next deploy.                                                                                 
`maestro update-transitional remove --all`
1. Redeploy all deployments

### <a id='single-rotation'></a> Rotating a Single CA and its Leaf Certificates
<p class="note">
<strong>Note:</strong> In each command, the <code>CA-NAME</code> snippet will represent the path to the CA that will be rotated. It is important that the provided name is the <strong>full path to the credential</strong>. 
</p>

1. Regenerate the desired CA. This will create a new version of this CA.                                 
`maestro regenerate ca --name "<CA-NAME>"`
1. Mark the latest version of the single CA as transitional (inactive).                                    
`maestro update-transitional latest --name "<CA-NAME>"`
1. Redeploy all deployments that use the CA that is being rotated
1. Mark the signing version of the single CA as transitional.                                               
`maestro update-transitional signing --name "<CA-NAME>"`
1. Regenerate all leaf certificates signed by the CA being rotated.                                                                                          
`maestro regenerate leaf --signed-by "<CA-NAME>"`
1. Redeploy all deployments that use the CA that is being rotated
1. Remove the transitional flag from the single CA. This will remove the old, now in-active CA version on the next deploy.                                                                                 
`maestro update-transitional remove --name "<CA-NAME>"`
1. Redeploy all deployments that use the CA that is being rotated

### <a id='leaf-rotation'></a> Rotating all Leaf Certificates
1. Regenerate all leaf certificates.
`maestro regenerate leaf --all`
1. Redeploy all deployments

### <a id='services-rotation'></a> Rotating the Services TLS CA its Leaf Certificates
<p class="note warning">
<strong>Warning:</strong> Upgrading your On-demand service instances is required in order to complete a rotation of the Services TLS CA. It is recommended that you set up your services for high availability to minimize any service downtime. 
</p>

1. Regenerate the services TLS CA. 
    1. Run the list command (`maestro ls`) on the Services CA to see if your services CA was CredHub set. You will see one Services CA listed per deployment, but it is the same certificate. 
    1. If the Services CA was CredHub set, run the regenerate command with the `--force` flag                                                                                                             

    `maestro regenerate ca --name "/services/tls_ca"`
1. Mark the latest version of the services TLS CA as transitional (inactive).                                    
`maestro update-transitional latest --name "/services/tls_ca"`
1. Redeploy all deployments that use the Services TLS CA
    1. Make sure that you run the Upgrade all On-demand Instances errand for every services deployment. Note that the name of this errand may differ between services.
    1. Rebind <strong>ANY</strong> applications that rely on services and do not use the trusted store. Note: this will most likely be all applications that are not written in Java with Spring. This will propagate the newly trusted services CA to the application instances.
    1. Restage <strong>ANY</strong> applications that rely on services (including Java apps)
        1. The `bg-restage` command provided through the following <a href="https://github.com/orange-cloudfoundry/cf-plugin-bg-restage" target="_blank">plugin</a> allows for zero downtime Blue-Green restaging without access to the application source code. 
1. Mark the signing version of the services CA as transitional.                                               
`maestro update-transitional signing --name "/services/tls_ca"`
1. Regenerate all service instance certificates signed by the services CA.                                                                                          
`maestro regenerate leaf --signed-by "/services/tls_ca"`
1. Redeploy all deployments that use the Services TLS CA
    1. Make sure that you run the Upgrade all On-demand Instances errand for every services deployment. Note that the name of this errand may differ between services.
    1. Rebind <strong>ANY</strong> applications that rely on services and do not use the trusted store. Note: this will most likely be all applications that are not written in Java with Spring. This will propagate the newly trusted services CA to the application instances.
    1. Restage <strong>ANY</strong> applications that rely on services (including Java apps)
1. Remove the transitional flag from the services CA. This will remove the old, now in-active version of the Services CA on the next deployment.                                                                                 
`maestro update-transitional remove --name "/services/tls_ca"`
1. Redeploy all deployments that use the Services TLS CA
    1. Make sure that you run the Upgrade all On-demand Instances* errand for every services deployment. Note that the name of this errand may differ between services.
    1. Rebind ANY applications that rely on services and do not use the trusted store. Note: this will most likely be all applications that are not written in Java with Spring. This will propagate the newly trusted services CA to the application instances.
    1. Restage ANY applications that rely on services (including Java apps)

## <a id='garbage-collect-workflow'></a> Cleaning Up Inactive Certificate Versions
### Overview
Over the course of many rotations, it is possible for the CredHub database to fill up. In order to prevent this, you can periodically use Maestro’s garbage collect functionality to cleanup old, unused certificate versions.

To see if you need to run garbage collect, either manually check the BOSH Director’s VM vitals via your IaaS provider or by sshing onto the BOSH Director and running `df -h /var/vcap/store`.

### Cleaning Up All Leaf Certificates
1. Determine which certificate versions will be deleted.                                               
`maestro garbage-collect leaf --all --dry-run`
1. Delete the certificate versions  
`maestro garbage-collect leaf --all`

### Cleaning Up All Certificate Authorities
<p class="note">
<strong>Note:</strong> Generally, leaf certificate garbage collection will be more than enough to free up space in the database 
</p>

1. Determine which certificate versions will be deleted                                               
`maestro garbage-collect ca --all --dry-run`
1. Delete the certificate versions							
`maestro garbage-collect ca --all`

### Cleaning Up a Single Certificate Authority
1. Determine which certificate versions will be deleted.
`maestro garbage-collect leaf --name “<LEAF_NAME>” --dry-run`
1. Delete the certificate versions							
`maestro garbage-collect leaf --name “<LEAF_NAME>”`

### Cleaning Up a Single Leaf Certificate
1. Determine which certificate versions will be deleted.                                               
`maestro garbage-collect leaf --name “<LEAF_NAME>” --dry-run`
1. Delete the certificate versions							
`maestro garbage-collect leaf --name “<LEAF_NAME>”`

### About the Force Flag
To enhance the safety of the garbage collect command, by default, only versions of a certificate older than the currently active version will be deleted. This is done to prevent issues from arising if this command is done mid-rotation.

If you would like to delete ALL inactive versions of CAs or leaf certificates , add the `--force` flag to the garbage collect command. This operation is not considered to be very safe so it is not recommended to be run unless absolutely necessary 
