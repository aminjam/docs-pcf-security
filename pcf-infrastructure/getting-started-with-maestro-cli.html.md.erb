---
title: Getting Started with Maestro CLI
owner: CredHub Maestro
---

This topic describes setting up and using the Maestro CLI for CredHub.


## <a id='overview'></a> Overview

Maestro is available in Pivotal Platform Ops Manager v2.8 and later. For more information about Maestro, see the [Maestro documentation](https://maestro.readthedocs.io/en/latest/).

To use Maestro outside Ops Manager environments, contact [Pivotal Support](https://pivotal.io/support).


## <a id='setup-usage'></a> Set Up Environment Variables

This section describes setting up the environment variables you need to use the Maestro CLI.

### <a id='required-env-vars'></a> Required Environment Variables

To set the CredHub environment variables you need to set up the Maestro CLI, follow the guidance in the table below.

To set BOSH environment variables, see [Advanced Troubleshooting with the BOSH CLI](https://docs.pivotal.io/platform/2-8/customizing/trouble-advanced.html).

<table border="1">
  <tr>
    <th>Environment Variable</th>
    <th>Description</th>
  </tr>
  <tr>
    <td>BOSH_ENVIRONMENT</td>
    <td>URL or IP address of BOSH director</td>
  </tr>
  <tr>
    <td>BOSH_CLIENT</td>
    <td>Name of BOSH client</td>
  </tr>
  <tr>
    <td>BOSH_CLIENT_SECRET</td>
    <td>BOSH client secret</td>
  </tr>
  <tr>
    <td>BOSH_CA_CERT</td>
    <td>Path or value of BOSH Director trusted CA certificate</td>
  </tr>
  <tr>
  <td>CREDHUB_SERVER</td>
  <td>URL of BOSH director CredHub server. This should be <code>BOSH_ENVIRONMENT:8844</code>.</td>
  </tr>
  <tr>
    <td>CREDHUB_CLIENT</td>
    <td>Name of CredHub client. This is the same as <code>BOSH_CLIENT</code>.</td>
  </tr>
  <tr>
    <td>CREDHUB_SECRET</td>
    <td>CredHub client secret. This is the same as <code>BOSH_CLIENT_SECRET</code>.</td>
  </tr>
  <tr>
    <td>CREDHUB_CA_CERT</td>
    <td>Path or value of CredHub trusted CA certificate. This is the same as <code>BOSH_CA_CERT</code>.</td>
  </tr>
</table>

### <a id='maestro-outside-foundation'></a> Using Maestro from Outside Your Foundation

To use Maestro from outside your foundation, you must also set the following variables in addition to the required environment variables:

<table border="1">
  <tr>
    <th>Environment Variable</th>
    <th>Description</th>
  </tr>
  <tr>
    <td>BOSH\_ALL\_PROXY</td>
    <td>Socks5 proxy address of BOSH Director jumpbox</td>
  </tr>
  <tr>
    <td>CREDHUB_PROXY</td>
    <td>Socks5 proxy address of CredHub jumpbox</td>
  </tr>
</table>

### <a id='optional-env-vars'></a> Optional Environment Variables

You can also set the following optional enviroment variables:

<table border="1">
  <tr>
    <th>Environment Variable</th>
    <th>Description</th>
  </tr>
  <tr>
    <td>MAESTRO_DEBUG</td>
    <td>Enable debug logging</td>
  </tr>
  <tr>
    <td>MAESTRO_OUTPUT_JSON</td>
    <td>Print all Maestro command output as JSON</td>
  </tr>
</table>


## <a id='commands'></a> Commands

This section describes the commands you can use in the Maestro CLI.

To review a list of Maestro commands in the Maestro CLI, run `maestro --help`.

### <a id='list'></a> maestro list

`maestro list` displays expiry information for all actively deployed certificates in CredHub.

You can use the following flags with `maestro list`:

* `expires-within`: Filter certificates by expiry window. Valid units are `d` for days, `w` for weeks, `m` for months, and `y` for years.

* `deployment-name`: Filter certificates by deployment name.

* `name`: Show metadata for a single certificate.

* `include-all`: Include inactive certificates in response.

* `ca-only`: Filter certificates that are Certificate Authorities (CAs).

* `leaf-only`: Filter certificates that are leaf certificates.

* `generated-only`: Include only certificates that have been generated by CredHub.

The `deployment-name` and `include-all` flags are mutually exclusive.

### <a id='topology'></a> maestro topology

`maestro topology` displays expiry information for all actively deployed certificates in CredHub.

You can use the following flags with `maestro topology`:

* `name`: Display topology for a single certificate.

* `include-all`: Display topology for both active and inactive certificates.

#### <a id='expected'></a> maestro topology expected

`maestro topology expected` shows the expected topology that would result from a BOSH deployment.

You can use the following flags with `maestro topology expected`:

* `deployment-names`: Allow expected topology to reflect a selective deployment. This must be a comma-separated list.

### <a id='regenerate'></a> maestro regenerate

`maestro regenerate` regenerates CredHub managed certificates. By default, certificates that have been set in CredHub are not regenerated.

#### <a id='regenerate-ca'></a> maestro regenerate ca

`maestro regenerate ca` regenerates actively deployed CAs.

You can use the following flags with `maestro regenerate ca`:

* `all`: Regenerate all actively deployed CAs.

* `name`: Regenerate a single CA by name.

* `dry-run`: List CAs to be regenerated.

* `exclude`: Comma-separated list of CAs to exclude from being regenerated. This includes all children of excluded CAs.

* `force`: Regenerate both CredHub-generated and set CAs.

#### <a id='regenerate-leaf'></a> maestro regenerate leaf

`maestro regenerate leaf` regenerates actively deployed leaf certificates.

You can use the following flags with `maestro regenerate leaf`:

* `all`: Regenerate all actively deployed leaf certificates.

* `name`: Regenerate single leaf by name.

* `signed-by`: Regenerate all actively deployed leaf certificates signed by a specific CA.

* `dry-run`: List leafs to be regenerated.

* `exclude-signed-by`: Exclude all leaf certificates signed by a list of CAs from being regenerated.

* `force`: Regenerate both CredHub generated and set leaf certificates.

### <a id='update-transitional'></a> maestro update-transitional

`maestro update-transitional` updates the transitional flag for CAs.

#### <a id='ut-latest'></a> maestro update-transitional latest

`maestro update-transitional latest` updates the transitional flag for the latest version of the actively deployed CA.

You can use the following flags with `maestro update-transitional latest`:

* `all`: Bulk update the transitional flag for all actively deployed CAs.

* `name`: Update transitional flag for a single CA.

* `dry-run`: List CAs to be updated.

* `exclude`: Exclude a list of CAs and their children from being updated.

#### <a id='signing'></a> maestro update-transitional signing

`maestro update-transitional signing` updates the transitional flag for the version of the actively deployed CA that signed deployed leaf certificates.

You can use the following flags with `maestro update-transitional signing`:

* `all`: Bulk update the transitional flag for all actively deployed CAs.

* `name`: Update transitional flag for a single CA.

* `dry-run`: List CAs to be updated.

* `exclude`: Exclude a list of CAs and their children from being updated.

#### <a id='remove'></a> maestro update-transitional remove

`maestro update-transitional remove`) removes the transitional flag for all versions of the actively deployed CA.

You can use the following flags with `maestro update-transitional remove`:

* `all`: Bulk remove the transitional flag for all actively deployed CAs.

* `name`: Remove transitional flag for a single CA.

* `dry-run`: List CAs to be updated.

* `exclude`: Exclude a list of CAs and their children from being updated.

### <a id='garbage-collect'></a> maestro garbage-collect

`maestro garbage-collect` deletes inactive certificate versions.

#### <a id='gc-leaf'></a> maestro garbage-collect leaf

`maestro garbage-collect leaf` deletes inactive leaf certificate versions that are older than the active certificate version.

You can use the following flags with `maestro garbage-collect leaf`:

* `all`: Remove all inactive versions of deployed leaf certificates.

* `name`: Remove all inactive versions of a single leaf certificate.

* `dry-run`: List leaf certificate versions to be removed.

* `force`: Remove all inactive leaf certificates.

#### <a id='gc-ca'></a> maestro garbage-collect ca

`maestro garbage-collect ca` deletes inactive CA versions that are older than the active CA version.

You can use the following flags with `maestro garbage-collect ca`:

* `all`: Remove all inactive versions of deployed CAs.

* `name`: Remove all inactive versions of a single CA.

* `dry-run`: List CA versions to be removed.

* `force`: Remove all inactive CAs.